// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	entity "devops-tpl/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDevOps is a mock of DevOps interface.
type MockDevOps struct {
	ctrl     *gomock.Controller
	recorder *MockDevOpsMockRecorder
}

// MockDevOpsMockRecorder is the mock recorder for MockDevOps.
type MockDevOpsMockRecorder struct {
	mock *MockDevOps
}

// NewMockDevOps creates a new mock instance.
func NewMockDevOps(ctrl *gomock.Controller) *MockDevOps {
	mock := &MockDevOps{ctrl: ctrl}
	mock.recorder = &MockDevOpsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevOps) EXPECT() *MockDevOpsMockRecorder {
	return m.recorder
}

// GetMetric mocks base method.
func (m *MockDevOps) GetMetric(arg0 context.Context, arg1 entity.Metric) (entity.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(entity.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockDevOpsMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockDevOps)(nil).GetMetric), arg0, arg1)
}

// GetMetricNames mocks base method.
func (m *MockDevOps) GetMetricNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricNames indicates an expected call of GetMetricNames.
func (mr *MockDevOpsMockRecorder) GetMetricNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricNames", reflect.TypeOf((*MockDevOps)(nil).GetMetricNames), arg0)
}

// PingRepo mocks base method.
func (m *MockDevOps) PingRepo(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingRepo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingRepo indicates an expected call of PingRepo.
func (mr *MockDevOpsMockRecorder) PingRepo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingRepo", reflect.TypeOf((*MockDevOps)(nil).PingRepo), arg0)
}

// StoreMetric mocks base method.
func (m *MockDevOps) StoreMetric(arg0 context.Context, arg1 entity.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockDevOpsMockRecorder) StoreMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockDevOps)(nil).StoreMetric), arg0, arg1)
}

// StoreMetrics mocks base method.
func (m *MockDevOps) StoreMetrics(arg0 context.Context, arg1 []entity.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetrics indicates an expected call of StoreMetrics.
func (mr *MockDevOpsMockRecorder) StoreMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetrics", reflect.TypeOf((*MockDevOps)(nil).StoreMetrics), arg0, arg1)
}

// MockMetricRepo is a mock of MetricRepo interface.
type MockMetricRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRepoMockRecorder
}

// MockMetricRepoMockRecorder is the mock recorder for MockMetricRepo.
type MockMetricRepoMockRecorder struct {
	mock *MockMetricRepo
}

// NewMockMetricRepo creates a new mock instance.
func NewMockMetricRepo(ctrl *gomock.Controller) *MockMetricRepo {
	mock := &MockMetricRepo{ctrl: ctrl}
	mock.recorder = &MockMetricRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRepo) EXPECT() *MockMetricRepoMockRecorder {
	return m.recorder
}

// GetMetric mocks base method.
func (m *MockMetricRepo) GetMetric(arg0 context.Context, arg1 string) (entity.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0, arg1)
	ret0, _ := ret[0].(entity.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricRepoMockRecorder) GetMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricRepo)(nil).GetMetric), arg0, arg1)
}

// GetMetricNames mocks base method.
func (m *MockMetricRepo) GetMetricNames(arg0 context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricNames", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetMetricNames indicates an expected call of GetMetricNames.
func (mr *MockMetricRepoMockRecorder) GetMetricNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricNames", reflect.TypeOf((*MockMetricRepo)(nil).GetMetricNames), arg0)
}

// Ping mocks base method.
func (m *MockMetricRepo) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricRepoMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricRepo)(nil).Ping), arg0)
}

// StoreAll mocks base method.
func (m *MockMetricRepo) StoreAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAll indicates an expected call of StoreAll.
func (mr *MockMetricRepoMockRecorder) StoreAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAll", reflect.TypeOf((*MockMetricRepo)(nil).StoreAll))
}

// StoreMetric mocks base method.
func (m *MockMetricRepo) StoreMetric(arg0 context.Context, arg1 entity.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetric indicates an expected call of StoreMetric.
func (mr *MockMetricRepoMockRecorder) StoreMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetric", reflect.TypeOf((*MockMetricRepo)(nil).StoreMetric), arg0, arg1)
}

// Upload mocks base method.
func (m *MockMetricRepo) Upload(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockMetricRepoMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockMetricRepo)(nil).Upload), arg0)
}
